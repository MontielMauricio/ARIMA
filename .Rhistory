install.packages(c("seasonal", "tempdisagg", "tseries", "vars"))
setwd("~/GitHub/Forecasting/ARIMA")
sales <- read_excel("data.xlsx")
#librerías
library(readxl)
sales <- read_excel("data.xlsx")
sales <- ts(sales, start = c(2014,01), frequency = 12)
autoplot(sales)
library(tidyverse)
autoplot(sales)
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMA")
#librerías
library(readxl)
library(tidyverse)
# Importar datos
sales <- read_excel("data.xlsx")
autoplot(sales)
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMA")
#librerías
library(readxl)
library(tidyverse)
# Importar datos
sales <- read_excel("data.xlsx")
sales <- ts(sales, start = c(2014,01), frequency = 12)
ts.plot(sales)
library(tseries)
# Prueba de estacionariedad
adf.test(sales)
# Prueba de estacionariedad
adf.test(diff(sales))
# Prueba de estacionariedad
kpss.test(sales)
# Prueba de estacionariedad
kpss.test(diff(sales))
library(urca)
# Prueba de estacionariedad
ur.kpss(sales) %>% summary()
ur.kpss(diff(sales)) %>% summary()
# grafica de los datos diferenciados
ts.plot(diff(sales))
acf(diff(sales))
acf(sales)
acf(diff(sales))
autoplot(sales)+
xlab("Año")+ ylab("Ventas mensuales en dolares")
ts.toplot(sales)+
xlab("Año")+ ylab("Ventas mensuales en dolares")
ts.plot(sales)+
xlab("Año")+ ylab("Ventas mensuales en dolares")
sales <- diff(sales)
ts.plot(sales)
# Selección automatica del modelo ARIMA
auto.arima(sales, seasonal=F)
library(forecast)
install.packages("forecast")
library(forecast)
# Selección automatica del modelo ARIMA
auto.arima(sales, seasonal=F)
# Pronóstico
forecast(modelo, h=9, include = 30)
# Selección automatica del modelo ARIMA
modelo <- auto.arima(sales, seasonal=F)
# Pronóstico
forecast(modelo, h=9, include = 30)
# Pronóstico
ts.plot(forecast(modelo, h=9, include = 30))
# Pronóstico
forecast(modelo, h=9, include = 30)
# Pronóstico
pro <- forecast(modelo, h=9, include = 30)
ts.plot(pro)
install.packages("fpp2")
# Pronóstico
autoplot(forecast(modelo, h=9, include = 30))
# Pronóstico
autoplot(forecast(modelo, h=9, include = 4))
# Pronóstico
autoplot(forecast(modelo, h=9))
# Selección automatica del modelo ARIMA
modelo <- auto.arima(sales, seasonal=F)
modelo
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMA")
#librerías
library(readxl)
library(tidyverse)
library(tseries)
library(urca)
library(forecast)
# Importar datos
sales <- read_excel("data.xlsx")
sales <- ts(sales, start = c(2014,01), frequency = 12)
# Grafico de datos en niveles
ts.plot(sales)
# Prueba de estacionariedad
ur.kpss(sales) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(sales)) %>% summary() # los datos diferenciados si son estacionarios
# grafica de los datos diferenciados
ts.plot(diff(sales))
##
# Modelo ARIMA no estacional
##
# AR representa una regresion de la variable cotra valores pasados de ella misma
# MA representa la media movil ponderada de los errores pasados del pronóstico.
# Combinando los dos modelos
# p = parte autorregresiva
# d = grado de difenrenciacion
# q = parte media movil
# Selección automatica del modelo ARIMA
modelo <- auto.arima(sales, seasonal=F)
# Pronóstico
autoplot(forecast(modelo, h=9))
# Selección automatica del modelo ARIMA
modelo <- auto.arima(sales, seasonal=T)
# Pronóstico
autoplot(forecast(modelo, h=9))
modelo
checkresiduals(modelo)
?auto.arima
# Pronóstico
autoplot(forecast(modelo, h=9, stepwise=T, approximation=T, trace=T))
# Selección automatica del modelo ARIMA
modelo <- auto.arima(sales, seasonal=T, stepwise=T, approximation=T, trace=T)
# Pronóstico
autoplot(forecast(modelo, h=9))
checkresiduals(modelo) # Los residuales no estan correlacionados
forecast
forecast(modelo, h=9)
#librerías
library(readxl,tidyverse,tseries,urca,forecast)
#librerías
library(readxl,tidyverse,tseries,urca,forecast)
#librerías
library(readxl,tidyverse,tseries,forecast)
################################################
# Con este código se pueden pronósticar series de tiempo multivariadas
#
## Funciones de transferencia
#
# Hecho por Mauricio Montiel el 10/04/2020
###############################################
# Preliminares
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMAX")
#librerías
library(readxl)
library(tidyverse)
library(tseries)
library(urca)
library(forecast)
# Importar datos
sales_x <- read_excel("data.xlsx")
sales <- ts(sales, start = c(2014,01), frequency = 12)
# Grafico de datos en niveles
ts.plot(sales)
sales_x <- ts(sales, start = c(2014,01), frequency = 12)
# Grafico de datos en niveles
ts.plot(sales_x)
# Grafico de datos en niveles
ts.plot(scale(sales_x)
# Grafico de datos en niveles
ts.plot(scale(sales_x))
# Grafico de datos en niveles
ts.plot(scale(sales_x))
# Grafico de datos en niveles
ts.plot(scale(sales_x), col = c(1, 2),  lwd = c(1, 2))
# Prueba de estacionariedad
ur.kpss(sales_x) %>% summary() #los datos en niveles no son estacionarios
# Prueba de estacionariedad
ur.kpss(sales[,"sales"]) %>% summary() #los datos en niveles no son estacionarios
# Prueba de estacionariedad
ur.kpss(sales[,"SALES"]) %>% summary() #los datos en niveles no son estacionarios
# Prueba de estacionariedad
ur.kpss(sales[,1]) %>% summary() #los datos en niveles no son estacionarios
View(sales_x)
# Prueba de estacionariedad
ur.kpss(sales_x[,1]) %>% summary() #los datos en niveles no son estacionarios
# Prueba de estacionariedad
ur.kpss(sales_x[,2]) %>% summary() #los datos en niveles no son estacionarios
# Prueba de estacionariedad
ur.kpss(sales_x$SALES) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(sales_x$...2)) %>% summary() # los datos diferenciados si son estacionarios
# grafica de los datos diferenciados
ts.plot(diff(sales))
# grafica de los datos diferenciados
ts.plot(diff(sales_x))
# grafica de los datos diferenciados
ts.plot(diff(sales_x))
# Selección automatica del modelo ARIMA
modelo <- auto.arima(sales, x=sales_x$...2 seasonal=T, stepwise=T, approximation=T, trace=T)
# Selección automatica del modelo ARIMA
modelo <- auto.arima(sales, x=sales_x$...2, seasonal=T, stepwise=T, approximation=T, trace=T)
# Selección automatica del modelo ARIMA
modelo <- auto.arima(sales, x=sales_x$...2, seasonal=T, stepwise=T, approximation=F, trace=T)
# Selección automatica del modelo ARIMA
modelo <- auto.arima(sales, x=sales_x$...2, seasonal=T, stepwise=T, approximation=T, trace=T)
# Selección automatica del modelo ARIMA
modelo <- auto.arima(sales, x=sales_x$...2, seasonal=T, stepwise=T, approximation=T)
modelo
# Selección automatica del modelo ARIMA
modelo_x <- auto.arima(sales, x=sales_x$...2, seasonal=T, stepwise=T, approximation=T)
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMAX")
#librerías
library(readxl)
library(tidyverse)
library(tseries)
library(urca)
library(forecast)
# Importar datos
sales_x <- read_excel("data.xlsx")
sales_x <- ts(sales, start = c(2014,01), frequency = 12)
# Grafico de datos en niveles
ts.plot(scale(sales_x), col = c(1, 2),  lwd = c(1, 2)) #la roja IGAE
# Prueba de estacionariedad
ur.kpss(sales_x$SALES) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(sales_x$...2)) %>% summary() # los datos diferenciados si son estacionarios
##
# Modelo ARIMA
##
# AR representa una regresion de la variable cotra valores pasados de ella misma
# MA representa la media movil ponderada de los errores pasados del pronóstico.
# Combinando los dos modelos
# p = parte autorregresiva
# d = grado de difenrenciacion
# q = parte media movil
# Selección automatica del modelo ARIMA
modelo_x <- auto.arima(sales, x=sales_x$...2, seasonal=T, stepwise=T, approximation=T)
checkresiduals(modelo) # Los residuales no estan correlacionados
checkresiduals(modelo_x) # Los residuales no estan correlacionados
# Pronóstico
autoplot(forecast(modelo_x, h=9))
# Pronóstico
autoplot(forecast(modelo_x,x=sales_x$...2, h=9))
modelo_x
# Selección automatica del modelo ARIMA
modelo_x <- auto.arima(sales_x, x=sales_x$...2, seasonal=T, stepwise=T, approximation=T)
modelo_x
checkresiduals(modelo_x) # Los residuales estan correlacionados
# Pronóstico
autoplot(forecast(modelo_x,x=sales_x$...2, h=9))
# Selección automatica del modelo ARIMA
modelo_x <- auto.arima(sales_x, xreg =sales_x$...2, seasonal=T, stepwise=T, approximation=T)
sales_x$...2
# Selección automatica del modelo ARIMA
modelo_x <- auto.arima(sales_x$SALES, xreg =sales_x$...2, seasonal=T, stepwise=T, approximation=T)
modelo_x
checkresiduals(modelo_x) # Los residuales estan correlacionados
# Pronóstico
autoplot(forecast(modelo_x,xreg = sales_x$...2, h=9))
# Pronóstico
autoplot(forecast(modelo_x,xreg = sales_x$...2, h=4))
# Pronóstico
autoplot(forecast(modelo_x,xreg = sales_x$...2, h=1))
# Pronóstico
autoplot(forecast(modelo_x,xreg = sales_x$...2, h=1))
# Pronóstico
autoplot(forecast(modelo_x, h=1))
# Pronóstico
autoplot(forecast(modelo_x, h=1))
modelo_x
# Pronóstico
autoplot(forecast(modelo_x,xreg =sales_x$...2, h=1))
forecast(modelo_x,xreg =sales_x$...2, h=1)
# Pronóstico
autoplot(forecast(modelo_x,xreg =sales_x$...2=rep(60,9), h=1))
# Pronóstico
autoplot(forecast(modelo_x,xreg =sales_x$...2 = rep(60,9), h=1))
# Pronóstico
autoplot(forecast(modelo_x,xreg =sales_x[,2] = rep(60,9), h=1))
# Pronóstico
autoplot(forecast(modelo_x,xreg =sales_x[,2], h=1))
# Pronóstico
autoplot(forecast(modelo_x,xreg =sales_x$...2, h=1))
# Selección automatica del modelo ARIMA
modelo_x <- auto.arima(sales_x$SALES, xreg =sales_x$...2, seasonal=T, stepwise=T, approximation=T)
checkresiduals(modelo_x) # Los residuales estan correlacionados
# Selección automatica del modelo ARIMA
modelo_x <- auto.arima(sales_x$SALES, xreg =sales_x$...2, seasonal=F, stepwise=T, approximation=T)
checkresiduals(modelo_x) # Los residuales estan correlacionados
# Selección automatica del modelo ARIMA
modelo_x <- auto.arima(sales_x$SALES, xreg =sales_x$...2, seasonal=T, stepwise=T, approximation=T)
checkresiduals(modelo_x) # Los residuales estan correlacionados
# Selección automatica del modelo ARIMA
igae <- sales_x$...2
igae
modelo_x <- auto.arima(sales_x$SALES, xreg = igae, seasonal=T, stepwise=T, approximation=T)
checkresiduals(modelo_x) # Los residuales estan correlacionados
# Pronóstico
autoplot(forecast(modelo_x,xreg =igae, h=1))
modelo_x <- auto.arima(sales_x[, "SALES"], xreg = igae, seasonal=T, stepwise=T, approximation=T)
checkresiduals(modelo_x) # Los residuales estan correlacionados
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMAX")
#librerías
library(readxl)
library(tidyverse)
library(tseries)
library(urca)
library(forecast)
# Importar datos
sales_x <- read_excel("data.xlsx")
sales_x <- ts(sales, start = c(2014,01), frequency = 12)
# Grafico de datos en niveles
ts.plot(scale(sales_x), col = c(1, 2),  lwd = c(1, 2)) #la roja IGAE
# Prueba de estacionariedad
ur.kpss(sales_x$SALES) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(sales_x$...2)) %>% summary() # los datos diferenciados si son estacionarios
##
# Modelo ARIMA
##
# AR representa una regresion de la variable cotra valores pasados de ella misma
# MA representa la media movil ponderada de los errores pasados del pronóstico.
# Combinando los dos modelos
# p = parte autorregresiva
# d = grado de difenrenciacion
# q = parte media movil
# Selección automatica del modelo ARIMA
igae <- sales_x$...2
sales_x[,"SALES"]
igae
modelo_x <- auto.arima(sales_x[,"SALES"], xreg = igae, seasonal=T, stepwise=T, approximation=T)
checkresiduals(modelo_x) # Los residuales estan correlacionados
fitted(modelo_x)
autoplot(fitted(modelo_x))
checkresiduals(modelo_x) # Los residuales estan correlacionados
# Pronóstico
autoplot(forecast(modelo_x,xreg =igae, h=1))
?forecast
# Pronóstico
autoplot(forecast(modelo_x, h=1))
# Pronóstico
autoplot(forecast(modelo_x, xreg = igae, h=9))
# Pronóstico
autoplot(forecast(modelo_x, xreg = igae, include= 10, h=9))
# Preliminares
remove(list = ls())
################################################
# Con este código se pueden pronósticar series de tiempo univariadas
#
# Hecho por Mauricio Montiel el 10/04/2020
###############################################
# Preliminares
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMA")
#librerías
library(readxl)
library(tidyverse)
library(tseries)
library(urca)
library(forecast)
# Importar datos
sales <- read_excel("data.xlsx")
View(sales)
sales <- ts(sales, start = c(2014,01), frequency = 12)
# Grafico de datos en niveles
ts.plot(sales)
# Prueba de estacionariedad
ur.kpss(sales) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(sales)) %>% summary() # los datos diferenciados si son estacionarios
# grafica de los datos diferenciados
ts.plot(diff(sales))
# Preliminares
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMA")
#librerías
library(readxl)
library(tidyverse)
library(tseries)
library(urca)
library(forecast)
# Importar datos
sales <- read_excel("data.xlsx")
sales <- ts(sales, start = c(2014,01), frequency = 12)
# Grafico de datos en niveles
ts.plot(sales)
# Prueba de estacionariedad
ur.kpss(sales) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(sales)) %>% summary() # los datos diferenciados si son estacionarios
# grafica de los datos diferenciados
ts.plot(diff(sales))
# Selección automatica del modelo ARIMA
modelo <- auto.arima(sales, seasonal=T, stepwise=T, approximation=T, trace=T)
forecast(modelo, h=9)
# Pronóstico
autoplot(forecast(modelo, h=9))
checkresiduals(modelo) # Los residuales no estan correlacionados
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMA")
#librerías
library(readxl)
library(tidyverse)
library(tseries)
library(urca)
library(forecast)
sales <- read_excel("data.xlsx")
sales <- ts(sales, start = c(2014,01), frequency = 12)
# Grafico de datos en niveles
ts.plot(sales)
# Prueba de estacionariedad
ur.kpss(sales) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(sales)) %>% summary() # los datos diferenciados si son estacionarios
# grafica de los datos diferenciados
ts.plot(diff(sales))
# Selección automatica del modelo ARIMA
modelo <- auto.arima(sales, seasonal=T, stepwise=T, approximation=T)
forecast(modelo, h=9)
autoplot(forecast(modelo, h=9))
checkresiduals(modelo) # Los residuales no estan correlacionados
# Pronóstico
autoplot(forecast(modelo, h=9))
